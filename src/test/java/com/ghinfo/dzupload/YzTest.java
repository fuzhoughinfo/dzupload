package com.ghinfo.dzupload;

import cn.hutool.core.codec.Base64;
import cn.hutool.crypto.SecureUtil;
import cn.hutool.http.Header;
import cn.hutool.http.HttpUtil;
import cn.hutool.json.JSONArray;
import cn.hutool.json.JSONObject;
import cn.hutool.json.JSONUtil;
import com.ghinfo.dzupload.utils.ActiveXComponentUtils;
import com.jacob.activeX.ActiveXComponent;
import com.jacob.com.Dispatch;
import com.jacob.com.DispatchProxy;
import com.jacob.com.LibraryLoader;
import com.jacob.com.Variant;
import com.sun.scenario.effect.impl.sw.sse.SSEBlend_SRC_OUTPeer;
import org.junit.jupiter.api.Test;
import org.junit.platform.commons.util.StringUtils;

import java.io.File;
import java.util.HashMap;
import java.util.Map;

public class YzTest {

//    private static Map<String,String> dezhousealSpec =new HashMap<>();
//    static {
//
//        dezhousealSpec.put("01","4030发票专用章,30x40mm");
//        dezhousealSpec.put("02","40单位专用章,40mm");
//        dezhousealSpec.put("03","38x38财务专用章,38mm");
//        dezhousealSpec.put("04","30x30财务专用章,30mm");
//        dezhousealSpec.put("05","42合同章,42mm");
//        dezhousealSpec.put("06","50X35财务专用章(1),50x35mm");
//        dezhousealSpec.put("07","50X35中英公章,50x35mm");
//        dezhousealSpec.put("08","双圈中英文章,40mm");
//        dezhousealSpec.put("09","45X45党章,45mm");
//        dezhousealSpec.put("10","20三字法人章,20mm");
//        dezhousealSpec.put("11","20二字法人章,20mm");
//        dezhousealSpec.put("12","50X35报关专用章,35x50mm");
//        dezhousealSpec.put("13","50X35出境旅游专用章,35x50mm");
//        dezhousealSpec.put("14","18二字法人章,18mm");
//        dezhousealSpec.put("15","18三字法人章,18mm");
//        dezhousealSpec.put("16","医学证明专用章,32mm");
//        dezhousealSpec.put("17","补发医学证明专用章,32mm");
//        dezhousealSpec.put("18","诊断证明书专用章,38mm");
//        dezhousealSpec.put("19","40合同章,40mm");
//        dezhousealSpec.put("20","40出境旅游专用章,40mm");
//        dezhousealSpec.put("21","32专用章,32mm");
//        dezhousealSpec.put("22","铜单位公章,40mm");
//        dezhousealSpec.put("23","光敏公章,40mm");
//        dezhousealSpec.put("24","38公章,38mm");
//        dezhousealSpec.put("25","40中英文部门专用章,40mm");
//        dezhousealSpec.put("26","38合同章,38mm");
//        dezhousealSpec.put("27","35x50中英文部门章,35x50mm");
//        dezhousealSpec.put("28","38党徽章,38mm");
//        dezhousealSpec.put("29","38部门章,38mm");
//        dezhousealSpec.put("30","38园章,38mm");
//        dezhousealSpec.put("31","40业务专用章,40mm");
//        dezhousealSpec.put("32","42公章,42mm");
//        dezhousealSpec.put("33","40双排教育支付章,40mm");
//        dezhousealSpec.put("34","30专用章,30mm");
//        dezhousealSpec.put("35","50X35报检专用章,35x50mm");
//        dezhousealSpec.put("36","42单位专用章,42mm");
//        dezhousealSpec.put("37","医院部门专用章,38mm");
//        dezhousealSpec.put("38","45合同专用章,45mm");
//        dezhousealSpec.put("39","42业务专用章,42mm");
//        dezhousealSpec.put("40","50X35合同专用,35x50mm");
//        dezhousealSpec.put("41","50x33中英文公章,50x33mm");
//        dezhousealSpec.put("42","50x33中英文财务,33x50mm");
//        dezhousealSpec.put("43","40x30质量检验专用章,30x40mm");
//        dezhousealSpec.put("44","18四字法人章,18mm");
//        dezhousealSpec.put("45","45单位专用章,45mm");
//        dezhousealSpec.put("46","38中英文双圈,38mm");
//        dezhousealSpec.put("47","方章,47x18mm");
//        dezhousealSpec.put("48","20医学名人章,20mm");
//        dezhousealSpec.put("49","45x31专用章,45x31");
//        dezhousealSpec.put("50","38行政专用章,38mm");
//        dezhousealSpec.put("51","40x30专用章,40x30mm");
//
//
//        dezhousealSpec.put("52","44国徽专用章,44mm");
//        dezhousealSpec.put("53","50X35财务专用章,35x50mm");
//        dezhousealSpec.put("54","35业务专用章,35mm");
//        dezhousealSpec.put("55","30专用章,30mm");
//        dezhousealSpec.put("56","42党章,42mm");
//        dezhousealSpec.put("57","35专用章,35mm");
//        dezhousealSpec.put("58","36x24签证专用章,24x36mm");
//        dezhousealSpec.put("59","青年团分校委员公章,40mm");
//        dezhousealSpec.put("60","住院诊断专用章,40mm");
//        dezhousealSpec.put("61","委员国徽专用章,45mm");
//        dezhousealSpec.put("62","军人保障办公室章,45mm");
//
//        dezhousealSpec.put("63","40考试专用章,40mm");
//        dezhousealSpec.put("64","40双圈工会委员公章,40mm");
//        dezhousealSpec.put("65","40财务专用章,40mm");
//
////        dezhousealSpec.put("65","40x40财务专用章,40mm");
//        dezhousealSpec.put("66","40党徽章,40mm");
//        dezhousealSpec.put("67","42党章,42mm");
//        dezhousealSpec.put("68","50x35专用章,50x35mm");
//        dezhousealSpec.put("69","38双圈工会委员公章,38x38mm");
//        dezhousealSpec.put("70","40单位专用章,40mm");
//        dezhousealSpec.put("71","38财务专用章,38mm");
//        dezhousealSpec.put("72","42合同专用章,42mm");
//        dezhousealSpec.put("73","20法人章,20mm");
//
//        dezhousealSpec.put("74","40行政专用章,40mm");
//        dezhousealSpec.put("75","42双圈工会委员公章,42mm");
//        dezhousealSpec.put("76","人民解放军部队专业章,45mm");
//        dezhousealSpec.put("77","中国共青团专用章,38mm");
//        dezhousealSpec.put("78","45专业章,45mm");
//        dezhousealSpec.put("79","25园业务专用,25mm");
//        dezhousealSpec.put("80","24业务专用章,24mm");
//
//        dezhousealSpec.put("81","4030财务专用章,30x40mm");
//
//
//
//
//    }
//    //JSONObject json,
//
//
//    public static String  convertTypeMap(Map<String,String> map,String sealSize,String SealSampleName){
//
//
//
//        for (Map.Entry<String,String> entry : map.entrySet()) {
//
//          String []sealTypeName =entry.getValue().split(",");
////            System.out.println(sealTypeName[0]+" :"+sealTypeName[1]);
//           if(sealSize.equals(sealTypeName[1])){
//               String Size=sealSize.substring(0,sealSize.length() - 2);
//               String typeName =Size+SealSampleName;
//
//               if(StringUtils.isBlank(SealSampleName) ||SealSampleName.length()<0){
//                   return "其他";
//               }
//               if("30x40发票专用章".equals(typeName)){
//                   return "4030发票专用章";
//               }
//               if("18人名印章".equals(typeName)){
//                   return "18三字法人章";
//               }
//               if("20人名印章".equals(typeName)){
//                   return "20法人章";
//               }
//
//               if("42单位党章".equals(typeName)){
//                   return "42党章";
//               }
//               if("30x40财务专用章".equals(typeName)){
//                   return "4030财务专用章";
//               }
//
//               if(typeName.equals(sealTypeName[0])){
//                   return sealTypeName[0];
//               }
//           }
//
//        }
//
//
//        return null;
//    }




    private static Map<String,String> sealType =new HashMap<>();
    static {
        sealType.put("单位名称章","01");
        sealType.put("财务专用章","02");
        sealType.put("发票专用章","03");
        sealType.put("合同专用章","04");
        sealType.put("法定代表人名章","05");
        sealType.put("企业各类专用章","06");
        sealType.put("报关、报检专用章","07");
        sealType.put("独立法人企业下属各部门专用章","08");
        sealType.put("企业刻制项目部章","09");
        sealType.put("内资企业刻制中外文印章","10");
        sealType.put("中外合资（合作）、外商独资章","11");
        sealType.put("董事会、监事会公章","12");
        sealType.put("党组织、共产主义青年团章","13");
        sealType.put("工会章","14");
        sealType.put("驻津代表处章","15");
        sealType.put("清算组章","16");
        sealType.put("现金收讫章","17");
        sealType.put("现金付讫章","18");
        sealType.put("转讫章","19");
        sealType.put("行政许可事项决定书复印件","20");
        sealType.put("其它","99");

    }


    private static String sealTypeConveter(Map<String, String> map, String SealSampleName) {

        for (Map.Entry<String, String> entry : map.entrySet()) {

//            System.out.println("key = " + entry.getKey() + ", value = " + entry.getValue());
            if (SealSampleName.equals("单位专用章")) {
                return sealType.get("单位名称章");
            }
            if (SealSampleName.equals("人名印章")) {
                return sealType.get("法定代表人名章");
            }
            if (SealSampleName.equals("单位党章")) {
                return sealType.get("其它");
            }

            if (StringUtils.isBlank(SealSampleName) || SealSampleName.length() < 0) {

                return sealType.get("其它");
            }
            return sealType.get(entry.getKey());

        }
        return null;

    }
    public  void init() {
        String libFile = System.getProperty("os.arch").equals("amd64") ? "jacob-1.18-x64.dll" : "jacob-1.18-x86.dll";
        File tempFile =new File("E:\\workspace_zhong\\smis_workspace\\smis\\web\\src\\main\\resources\\jacob-1.18-x64.dll");
//		String path = "E:\\workspace_zhong\\smis_workspace\\smis\\web\\src\\main\\resources\\jacob-1.18-x64.dll";
        String path ="H:\\test\\jacob-1.18-x64.dll";
        String testPath ="E:\\workspace_zhong\\smis_workspace\\smis1\\sdata\\jacob-1.18-x64.dll";
        System.setProperty(LibraryLoader.JACOB_DLL_PATH, testPath);
        LibraryLoader.loadJacobLibrary();
    }
    public  Dispatch createActiveXDispatch() {
//		ActiveXComponent activex = new ActiveXComponent("CLSID:38EB2860-D8BB-489A-BD58-001EEF85F337");	//SMISServices.ocx
        ActiveXComponent activex = new ActiveXComponent("CLSID:1037E3F8-F546-4DC1-A03B-393BE550AE0D");	//SMISImageHelper.ocx

        Dispatch dispath = activex.getObject();
        return dispath;
    }
//    public  Variant callActiveX(String method, Object... attributes) throws Exception {
//        Dispatch dispatch = createActiveXDispatch();
//        try {
//            Variant variant = Dispatch.call(dispatch, method, attributes);
//            return variant;
//        } catch (Exception e) {
//            throw e;
//        } finally {
//            dispatch.safeRelease();
//        }
//    }
private Variant callActiveX(String sData, int size, String method, Dispatch dispatch) throws Exception {
    Variant vData = null;
    Variant vSize = null;
    try {
        vData = new Variant(sData);
        vSize = new Variant(size);
        Variant variant = Dispatch.call(dispatch, method, vData,vSize);
        return variant;
    } catch (Exception e) {
        throw e;
    } finally {
        if(vData != null) vData.safeRelease();
        if(vSize != null) vSize.safeRelease();
    }
}

   @Test
   public void yxzt (){
       init();

      byte[]Sdata ="getBytes();
       String Sbase = Base64.encode(Sdata);
       int size = Sbase.length();


       Variant result = null;
       try {
//           result = callActiveX("ImageBase64String2BMPBase64String", Sbase,size);
           ActiveXComponent activex = ActiveXComponentUtils.getInstance();
           Dispatch sControl = activex.getObject();
           DispatchProxy sCon = new DispatchProxy(sControl);
           Dispatch sc = sCon.toDispatch();

            result = callActiveX(Sbase,size,"ImageBase64String2BMPBase64String",sc);

            byte[] SbaseCode = Base64.decode(result.toString());
           System.out.println(SbaseCode.length);
       } catch (Exception e) {
           e.printStackTrace();
       }

   }


    public static void main(String[] args) throws Exception {





//        Variant result = callActiveX("ImageBase64String2BMPBase64String", Sbase,size);
//        System.out.println(result.toString());

        //        Long TimeStamp = System.currentTimeMillis();
//
//        JSONObject  jsonObject = new JSONObject();
//
//        jsonObject.put("Timestamp",TimeStamp);
//
//        jsonObject.put("Sign",SecureUtil.md5("TJSignet"+ TimeStamp));
//
//        jsonObject.put("areaID","371400");
//
//        jsonObject.put("carveID","371402000000");
//
//        String result = HttpUtil.createPost("http://222.133.49.90:8092/api/ImportSignetData/GetSignetID")
//                .header("Content-Type", "application/json;charset=UTF-8")
//                .header("Cache-Control", "no-cache")
//                .header("accept", "*/*")
//                .header("connection", "Keep-Alive")
//                .header(Header.USER_AGENT, "Hutool http")
//                .header("Content-Length", jsonObject.size()+"")
//                .body(jsonObject.toString()).execute().body();
//        JSONObject  object = JSONUtil.parseObj(result);
//
//        System.out.println(object.get("data"));



        Long TimeStamp = System.currentTimeMillis();

        JSONObject  jsonObject = new JSONObject();

        jsonObject.put("Timestamp",TimeStamp);

//        jsonObject.put("VerifyUserID","fj_guanghui");
//
//        jsonObject.put("VerifyPsd","jianguan_gh!@#$");

        jsonObject.put("Sign",SecureUtil.md5("TJSignet"+ TimeStamp));
//        jsonObject.put("areaID","371403");
//        jsonObject.put("carveID","371403000003");
        jsonObject.put("condition","CF");

        String result = HttpUtil.createPost("http://222.133.1.102:8089/api/ImportSignetData/GetSignetID")
                .header("Content-Type", "application/json;charset=UTF-8")
                .header("Cache-Control", "no-cache")
                .header("accept", "*/*")
                .header("connection", "Keep-Alive")
                .header(Header.USER_AGENT, "Hutool http")
                .header("Content-Length", jsonObject.size()+"")
                .body(jsonObject.toString()).execute().body();
        JSONObject  object = JSONUtil.parseObj(result);

        System.out.println(object.toString());





//       String s = "20210923173127866942_法定代表人身份证正面.jpg";
//
//        System.out.println(s.substring(s.length()-3));





//    String result =convertTypeMap(dezhousealSpec,"30x40mm","");
//        System.out.println("返回的结果:"+result);


//        sealTypeConveter(sealType,"");








    }
}
